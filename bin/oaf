#!/usr/bin/ruby
# oaf - Care-free web app prototyping using files and scripts
# Copyright 2013 Ryan Uber <ru@ryanuber.com>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

require 'optparse'
require 'oaf'

options = {:port => 9000}

begin
  OptionParser.new do |opts|
    opts.banner = [
      'oaf - Care-free web app prototyping using files and scripts',
      '', 'SYNOPSIS:', '  oaf [options] [path]', '', 'OPTIONS:'].join "\n"
    opts.on('-p', '--port PORT', 'Listening port. Default=9000') do |v|
      if not v.to_i.to_s == v.to_s
        puts "Port number must be an integer"
        exit 1
      end
      options[:port] = v.to_s
    end
    opts.on('--version', 'Show the version number') do
      puts Oaf::VERSION
      exit 0
    end
    opts.on_tail('-h', '--help', 'Show this message') do
      puts opts
      exit 0
    end
  end.parse!
rescue OptionParser::InvalidOption => e
  puts e.message
  exit 1
end

if ARGV.length == 0
  options[:path] = Dir.pwd
elsif ARGV.length == 1
  options[:path] = File.expand_path ARGV[0]
else
  puts "Unknown arguments: #{ARGV[1..ARGV.length].join(' ')}"
  exit 1
end

Oaf::HTTP.serve options[:path], options[:port]
